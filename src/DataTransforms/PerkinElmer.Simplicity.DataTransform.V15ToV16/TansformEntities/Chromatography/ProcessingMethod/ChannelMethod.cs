using ChannelMethod15 = PerkinElmer.Simplicity.Data.Version15.DataEntities.Chromatography.ProcessingMethod.ChannelMethod;
using ChannelMethod16 = PerkinElmer.Simplicity.Data.Version16.DataEntities.Chromatography.ProcessingMethod.ChannelMethod;

namespace PerkinElmer.Simplicity.DataTransform.V15ToV16.TansformEntities.Chromatography.ProcessingMethod
{
    public class ChannelMethod
    {
        public static ChannelMethod16 Transform(ChannelMethod15 channelMethod)
        {
            if (channelMethod == null) return null;
            var channelMethod16 = new ChannelMethod16
            {
                Id = channelMethod.Id,
                ChannelGuid = channelMethod.ChannelGuid,
                ParentChannelGuid = channelMethod.ParentChannelGuid,
                ProcessingMethodId = channelMethod.ProcessingMethodId,
                ChannelIndex = channelMethod.ChannelIndex,
                TimeAdjustment = channelMethod.TimeAdjustment,
                TangentSkimWidth = channelMethod.TangentSkimWidth,
                RrtReferenceCompound = channelMethod.RrtReferenceCompound,
                RrtReferenceType = channelMethod.RrtReferenceType,
                SmoothFunction = channelMethod.SmoothFunction,
                SmoothWidth = channelMethod.SmoothWidth,
                SmoothPasses = channelMethod.SmoothPasses,
                SmoothOrder = channelMethod.SmoothOrder,
                SmoothCycles = channelMethod.SmoothCycles,
                BunchingFactor = channelMethod.BunchingFactor,
                NoiseThreshold = channelMethod.NoiseThreshold,
                AreaThreshold = channelMethod.AreaThreshold,
                WidthRatio = channelMethod.WidthRatio,
                ValleyToPeakRatio = channelMethod.ValleyToPeakRatio,
                PeakHeightRatio = channelMethod.PeakHeightRatio,
                AdjustedHeightRatio = channelMethod.AdjustedHeightRatio,
                ValleyHeightRatio = channelMethod.ValleyHeightRatio,
                VoidTime = channelMethod.VoidTime,
                VoidTimeType = channelMethod.VoidTimeType,
                SubtractedBlankOrigBatchRunGuid = channelMethod.SubtractedBlankOrigBatchRunGuid,
                ChromatographicChannelDescriptor = channelMethod.ChromatographicChannelDescriptor,
                IsPdaMethod = channelMethod.IsPdaMethod,
                PdaPeakPurityParameters = PdaPeakPurityParameters.Transform(channelMethod.PdaPeakPurityParameters),
                PdaWavelengthMaxParameters = PdaWavelengthMaxParameters.Transform(channelMethod.PdaWavelengthMaxParameters),
                PdaAbsorbanceRatioParameters = PdaAbsorbanceRatioParameters.Transform(channelMethod.PdaAbsorbanceRatioParameters),
                PdaBaselineCorrectionParameters = PdaBaselineCorrectionParameters.Transform(channelMethod.PdaBaselineCorrectionParameters),
                PdaStandardConfirmationParameters = PdaStandardConfirmationParameters.Transform(channelMethod.PdaStandardConfirmationParameters),
                PdaLibrarySearchParameters = PdaLibrarySearchParameters.Transform(channelMethod.PdaLibrarySearchParameters),
                PdaLibraryConfirmationParameters = PdaLibraryConfirmationParameters.Transform(channelMethod.PdaLibraryConfirmationParameters),
                SuitabilityParameters = SuitabilityParameters.Transform(channelMethod.SuitabilityParameters),
                ProcessingMethodChannelIdentifier = channelMethod.ProcessingMethodChannelIdentifier,
                AutoGeneratedFromData = channelMethod.AutoGeneratedFromData
            };
            if (channelMethod.IntegrationEvents == null) return channelMethod16;
            foreach (var integrationEvent in channelMethod.IntegrationEvents)
                channelMethod16.IntegrationEvents.Add(IntegrationEvent.Transform(integrationEvent));
            return channelMethod16;
        }
    }
}
