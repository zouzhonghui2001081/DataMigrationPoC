using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using Dapper;
using log4net;
using PerkinElmer.Simplicity.Data.Version16.Contract.DataEntities.Chromatography.ProcessingMethod;

namespace PerkinElmer.Simplicity.Data.Version16.DataAccess.Postgresql.Chromatography
{
	internal class ChannelMethodDao
	{
		protected static readonly ILog Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
		public static string TableName { get; } = "ChannelMethod";
		public static string IdColumn { get; } = "Id";
		public static string ProcessingMethodIdColumn { get; } = "ProcessingMethodId";
		public static string ChannelGuidColumn { get; } = "ChannelGuid";
		public static string ParentChannelGuidColumn { get; } = "ParentChannelGuid";
		public static string ChannelIndexColumn { get; } = "ChannelIndex";
		public static string RrtReferenceCompoundColumn { get; } = "RrtReferenceCompound";
		public static string SmoothFunctionColumn { get; } = "SmoothFunction";
		public static string SmoothWidthColumn { get; } = "SmoothWidth";
		public static string SmoothPassesColumn { get; } = "SmoothPasses";
		public static string SmoothOrderColumn { get; } = "SmoothOrder";
		public static string SmoothCyclesColumn { get; } = "SmoothCycles";
		public static string BunchingFactorColumn { get; } = "BunchingFactor";
		public static string NoiseThresholdColumn { get; } = "NoiseThreshold";
		public static string AreaThresholdColumn { get; } = "AreaThreshold";
		public static string WidthRatioColumn { get; } = "WidthRatio";
		public static string ValleyToPeakRatioColumn { get; } = "ValleyToPeakRatio";
		public static string TimeAdjustmentColumn { get; } = "TimeAdjustment";
		public static string TangentSkimWidthColumn { get; } = "TangentSkimWidth";
		public static string PeakHeightRatioColumn { get; } = "PeakHeightRatio";
		public static string AdjustedHeightRatioColumn { get; } = "AdjustedHeightRatio";
		public static string ValleyHeightRatioColumn { get; } = "ValleyHeightRatio";
		public static string VoidTimeColumn { get; } = "VoidTime";
		public static string VoidTimeTypeColumn { get; } = "VoidTimeType";
		public static string RrtReferenceTypeColumn { get; } = "RrtReferenceType";
		public static string SubtractedBlankOrigBatchRunGuidColumn { get; } = "SubtractedBlankOrigBatchRunGuid";
		public static string ChromatographicChannelDescriptorColumn { get; } = "ChromatographicChannelDescriptor";
		public static string ProcessingMethodChannelIdentifierColumn { get; } = "ProcessingMethodChannelIdentifier";
		public static string IsPdaMethodColumn { get; } = "IsPdaMethod";
		public static string AutoGeneratedFromDataColumn { get; } = "AutoGeneratedFromData";
		

		protected readonly string SelectSql = "SELECT " +
		                                      $"{IdColumn}," +
		                                      $"{ChannelIndexColumn}," +
		                                      $"{ProcessingMethodIdColumn}," +
											  $"{ChannelGuidColumn}," +
											  $"{ParentChannelGuidColumn}," +
		                                      $"{RrtReferenceCompoundColumn}," +
		                                      $"{SmoothFunctionColumn}," +
		                                      $"{SmoothWidthColumn}," +
		                                      $"{SmoothPassesColumn}," +
		                                      $"{SmoothOrderColumn}," +
		                                      $"{SmoothCyclesColumn}," +
		                                      $"{BunchingFactorColumn}," +
		                                      $"{NoiseThresholdColumn}," +
		                                      $"{AreaThresholdColumn}," +
		                                      $"{WidthRatioColumn}," +
		                                      $"{ValleyToPeakRatioColumn}," +
		                                      $"{TimeAdjustmentColumn}," +
		                                      $"{TangentSkimWidthColumn}," +
		                                      $"{PeakHeightRatioColumn}," +
		                                      $"{AdjustedHeightRatioColumn}," +
		                                      $"{ValleyHeightRatioColumn}," +
		                                      $"{VoidTimeColumn}," +
		                                      $"{VoidTimeTypeColumn}," +
		                                      $"{SubtractedBlankOrigBatchRunGuidColumn}," +
		                                      $"{ChromatographicChannelDescriptorColumn}," +
		                                      $"{ProcessingMethodChannelIdentifierColumn}," +
		                                      $"{RrtReferenceTypeColumn}," +
		                                      $"{AutoGeneratedFromDataColumn}," +
		                                      $"{IsPdaMethodColumn} ";

        protected readonly string InsertIntoSql =
            $"INSERT INTO {TableName} " +
            $"({ChannelIndexColumn}," +
            $"{ProcessingMethodIdColumn}," +
            $"{ChannelGuidColumn}," +
            $"{ParentChannelGuidColumn}," +
            $"{RrtReferenceCompoundColumn}," +
            $"{SmoothFunctionColumn}," +
            $"{SmoothWidthColumn}," +
            $"{SmoothPassesColumn}," +
            $"{SmoothOrderColumn}," +
            $"{SmoothCyclesColumn}," +
            $"{BunchingFactorColumn}," +
            $"{NoiseThresholdColumn}," +
            $"{AreaThresholdColumn}," +
            $"{WidthRatioColumn}," +
            $"{ValleyToPeakRatioColumn}," +
            $"{TimeAdjustmentColumn}," +
            $"{TangentSkimWidthColumn}," +
            $"{PeakHeightRatioColumn}," +
            $"{AdjustedHeightRatioColumn}," +
            $"{ValleyHeightRatioColumn}," +
            $"{VoidTimeColumn}," +
            $"{VoidTimeTypeColumn}," +
            $"{SubtractedBlankOrigBatchRunGuidColumn}," +
            $"{ChromatographicChannelDescriptorColumn}," +
            $"{ProcessingMethodChannelIdentifierColumn}," +
            $"{RrtReferenceTypeColumn}," +
            $"{AutoGeneratedFromDataColumn}," +
            $"{IsPdaMethodColumn}) " +
            $"VALUES " +
            $"(@{ChannelIndexColumn}," +
            $"@{ProcessingMethodIdColumn}," +
            $"@{ChannelGuidColumn}," +
            $"@{ParentChannelGuidColumn}," +
            $"@{RrtReferenceCompoundColumn}," +
            $"@{SmoothFunctionColumn}," +
            $"@{SmoothWidthColumn}," +
            $"@{SmoothPassesColumn}," +
            $"@{SmoothOrderColumn}," +
            $"@{SmoothCyclesColumn}," +
            $"@{BunchingFactorColumn}," +
            $"@{NoiseThresholdColumn}," +
            $"@{AreaThresholdColumn}," +
            $"@{WidthRatioColumn}," +
            $"@{ValleyToPeakRatioColumn}," +
            $"@{TimeAdjustmentColumn}," +
            $"@{TangentSkimWidthColumn}," +
            $"@{PeakHeightRatioColumn}," +
            $"@{AdjustedHeightRatioColumn}," +
            $"@{ValleyHeightRatioColumn}," +
            $"@{VoidTimeColumn}," +
            $"@{VoidTimeTypeColumn}," +
            $"@{SubtractedBlankOrigBatchRunGuidColumn}," +
            $"@{ChromatographicChannelDescriptorColumn}," +
            $"@{ProcessingMethodChannelIdentifierColumn}," +
            $"@{RrtReferenceTypeColumn}," +
            $"@{AutoGeneratedFromDataColumn}," +
            $"@{IsPdaMethodColumn}) ";

        public virtual List<ChannelMethod> GetChannelMethods(IDbConnection connection, long processingMethodId)
        {
            List<ChannelMethod> channelMethods = connection.Query<ChannelMethod>(
                SelectSql +
                $"FROM {TableName} " +
                $"WHERE {ProcessingMethodIdColumn} = {processingMethodId}").ToList();

            return channelMethods;
        }


        public virtual void Create(IDbConnection connection, ChannelMethod channelMethod)
        {
            try
            {
                channelMethod.Id = connection.ExecuteScalar<long>($"{InsertIntoSql} RETURNING Id",
                    channelMethod);
            }
            catch (Exception ex)
            {
                Log.Error($"Error in Create method", ex);
                throw;
            }
        }



        public List<ChannelMethod> GetChannelMethodsByProcessingMethodBatchResultId(IDbConnection connection, long processingMethodBatchResultId)
		{
			try
			{
				List<ChannelMethod> channelMethods = connection.Query<ChannelMethod>(
					SelectSql +
					$" FROM {TableName} " +
					$" WHERE {ProcessingMethodIdColumn} = {processingMethodBatchResultId}"
				).ToList();

				return channelMethods;
			}
			catch (Exception ex)
			{
				Log.Error($"Error in GetChannelMethodsByProcessingMethodBatchResultId method", ex);
				throw;
			}

		}

		public void Delete(IDbConnection connection, long processingMethodId)
		{
			try
			{
				connection.Execute(
					$"DELETE FROM {TableName} " +
					$"WHERE {TableName}.{ProcessingMethodIdColumn} = {processingMethodId}");
			}
			catch (Exception ex)
			{
				Log.Error($"Error in Delete method", ex);
				throw;
			}
		}
	}
}
