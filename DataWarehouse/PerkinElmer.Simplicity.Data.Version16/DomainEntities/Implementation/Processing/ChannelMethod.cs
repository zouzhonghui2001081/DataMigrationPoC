using System;
using System.Collections.Generic;
using PerkinElmer.Domain.Contracts.Processing;
using PerkinElmer.Simplicity.Data.Version16.DomainEntities.Interface.Processing;
using PerkinElmer.Simplicity.Data.Version16.DomainEntities.Interface.Shared;

namespace PerkinElmer.Simplicity.Data.Version16.DomainEntities.Implementation.Processing
{
    internal class ChannelMethod : IChannelMethod
    {
        public int ChannelIndex { set; get; }

        public IChromatographicChannelDescriptor ChannelDescriptor { get; set; }

        public IProcessingMethodChannelIdentifier ChannelIdentifier { get; set; }
        public bool ExtraProcMethodChannelForAllSamples { get; set; }
        public bool AutoGeneratedFromData { get; set; }
        public Guid ChannelGuid { get; set; }
        public Guid ParentChannelGuid { get; set; }

        //public IDeviceIdentifier DeviceMethodIdentifier { get; set; }

        public IList<IIntegrationEvent> TimedIntegrationParameters { get; set; }

        public double? AreaThreshold { get; set; }

        public double TimeAdjustment { get; set; }

        public double VoidTime { get; set; }

        public VoidTimeType VoidTimeType { get; set; }

        public Guid RrtReferenceCompound { get; set; }

        public RrtReferenceType RrtReferenceType { get; set; }

        public Guid RetentionTimeReferenceCompound { get; set; }

        public ISmoothParameters SmoothParams { get; set; }

        public bool IsPdaMethod { get; set; }

        public IPdaParameters PdaParameters { get; set; }

        public int? BunchingFactor { get; set; }

        public double? NoiseThreshold { get; set; }

        public double WidthRatio { get; set; }

        public double ValleyToPeakRatio { get; set; }

        public double PeakHeightRatio { get; set; }

        public double AdjustedHeightRatio { get; set; }

        public double ValleyHeightRatio { get; set; }

        public double TangentSkimWidth { get; set; }

        public double CalibrationFactor { get; set; }

        public UnidentifiedPeakCalibrationType UnidentifiedPeakCalibrationType { get; set; }

        public string AmountUnit { get; set; }

//        public ISuitabilityParameters SuitabilityParameters { get; set; }


        public ChannelMethod()
        {
            TimedIntegrationParameters = new List<IIntegrationEvent>();
            PdaParameters = new PdaParameters();
        }

        public object Clone()
        {
            var channelMethod = new ChannelMethod
            {
                ChannelDescriptor = ChannelDescriptor,
                ChannelIdentifier = ChannelIdentifier,
                AutoGeneratedFromData = AutoGeneratedFromData,
                ChannelGuid = ChannelGuid,
                ParentChannelGuid = ParentChannelGuid,
                TimedIntegrationParameters = new List<IIntegrationEvent>(TimedIntegrationParameters),
                TimeAdjustment = TimeAdjustment,
                VoidTime = VoidTime,
                VoidTimeType = VoidTimeType,
                RrtReferenceCompound = RrtReferenceCompound,
                RrtReferenceType = RrtReferenceType,
                SmoothParams = SmoothParams,
                WidthRatio = WidthRatio,
                ValleyToPeakRatio = ValleyToPeakRatio,
                PeakHeightRatio = PeakHeightRatio,
                AdjustedHeightRatio = AdjustedHeightRatio,
                ValleyHeightRatio = ValleyHeightRatio,
                TangentSkimWidth = TangentSkimWidth,
                AreaThreshold = AreaThreshold,
                BunchingFactor = BunchingFactor,
                NoiseThreshold = NoiseThreshold,
                RetentionTimeReferenceCompound = RetentionTimeReferenceCompound,
                IsPdaMethod = IsPdaMethod,
                PdaParameters = (IPdaParameters)PdaParameters.Clone(),
                CalibrationFactor = CalibrationFactor,
                UnidentifiedPeakCalibrationType = UnidentifiedPeakCalibrationType,
                AmountUnit = AmountUnit,
                //SuitabilityParameters = SuitabilityParameters?.Clone() as ISuitabilityParameters
            };

            return channelMethod;
        }

        public bool IsEqual(IChannelMethod other)
        {
            bool isEqual = ChannelDescriptor.Equals(other.ChannelDescriptor)
                           && ChannelIdentifier.Equals(other.ChannelIdentifier)
                           && AutoGeneratedFromData.Equals(other.AutoGeneratedFromData)
                           && CompareTimedIntegrationParameters(TimedIntegrationParameters, other.TimedIntegrationParameters)
                           && TimeAdjustment.Equals(other.TimeAdjustment)
                           && VoidTime.Equals(other.VoidTime)
                           && VoidTimeType.Equals(other.VoidTimeType)
                           && WidthRatio.Equals(other.WidthRatio)
                           && ValleyToPeakRatio.Equals(other.ValleyToPeakRatio)
                           && PeakHeightRatio.Equals(other.PeakHeightRatio)
                           && ValleyHeightRatio.Equals(other.ValleyHeightRatio)
                           && TangentSkimWidth.Equals(other.TangentSkimWidth)
                           && AreaThreshold.Equals(other.AreaThreshold)
                           && BunchingFactor.Equals(other.BunchingFactor)
                           && NoiseThreshold.Equals(other.NoiseThreshold)
                           && IsPdaMethod.Equals(other.IsPdaMethod)
                           && CalibrationFactor.Equals(other.CalibrationFactor)
                           && UnidentifiedPeakCalibrationType.Equals(other.UnidentifiedPeakCalibrationType)
                           && Equals(AmountUnit, other.AmountUnit);
                           // && (SuitabilityParameters == null && other.SuitabilityParameters == null ||
                           //     SuitabilityParameters != null && other.SuitabilityParameters != null && SuitabilityParameters.Equals(other.SuitabilityParameters));

            if (other.IsPdaMethod)
            {
                isEqual = isEqual && PdaParameters.Equals(other.PdaParameters);
            }

            return isEqual;
        }

        public static bool CompareTimedIntegrationParameters(IList<IIntegrationEvent> timedIntegrationParameters1, IList<IIntegrationEvent> timedIntegrationParameters2)
        {
            if (timedIntegrationParameters1.Count != timedIntegrationParameters2.Count)
                return false;

            bool isEqual = true;
            for (int index = 0; index < timedIntegrationParameters1.Count; index++)
            {
                isEqual = timedIntegrationParameters1[index].Equals(timedIntegrationParameters2[index]);
            }

            return isEqual;
        }

        public bool Equals(IChannelMethod other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return ChannelIndex == other.ChannelIndex
                   && Equals(ChannelDescriptor, other.ChannelDescriptor)
                   && Equals(ChannelIdentifier, other.ChannelIdentifier)
                   && ExtraProcMethodChannelForAllSamples == other.ExtraProcMethodChannelForAllSamples
                   && AutoGeneratedFromData == other.AutoGeneratedFromData
                   && ChannelGuid.Equals(other.ChannelGuid)
                   && ParentChannelGuid.Equals(other.ParentChannelGuid)
                   && Equals(TimedIntegrationParameters, other.TimedIntegrationParameters)
                   && AreaThreshold.Equals(other.AreaThreshold)
                   && TimeAdjustment.Equals(other.TimeAdjustment)
                   && VoidTime.Equals(other.VoidTime)
                   && VoidTimeType == other.VoidTimeType
                   && RrtReferenceCompound.Equals(other.RrtReferenceCompound)
                   && RrtReferenceType == other.RrtReferenceType
                   && Equals(SmoothParams, other.SmoothParams)
                   && IsPdaMethod == other.IsPdaMethod
                   && Equals(PdaParameters, other.PdaParameters)
                   && BunchingFactor == other.BunchingFactor
                   && NoiseThreshold.Equals(other.NoiseThreshold)
                   && WidthRatio.Equals(other.WidthRatio)
                   && ValleyToPeakRatio.Equals(other.ValleyToPeakRatio)
                   && PeakHeightRatio.Equals(other.PeakHeightRatio)
                   && AdjustedHeightRatio.Equals(other.AdjustedHeightRatio)
                   && ValleyHeightRatio.Equals(other.ValleyHeightRatio)
                   && TangentSkimWidth.Equals(other.TangentSkimWidth)
                   && CalibrationFactor.Equals(other.CalibrationFactor)
                   && UnidentifiedPeakCalibrationType == other.UnidentifiedPeakCalibrationType
                   && string.Equals(AmountUnit, other.AmountUnit);
                   // && Equals(SuitabilityParameters, other.SuitabilityParameters);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((ChannelMethod)obj);
        }
    }
}